<?php
/**
 * Created by PhpStorm.
 * User: BMcClure
 * Date: 3/16/2016
 * Time: 4:53 PM
 */

define('COMMERCE_AVATAX_PRODUCTION_MODE', 'Production');
define('COMMERCE_AVATAX_DEVELOPMENT_MODE', 'Development');
define('COMMERCE_AVATAX_BASIC_VERSION', 'basic');
define('COMMERCE_AVATAX_PRO_VERSION', 'pro');

/**
 * Implements hook_tax_service_calculate().
 */
function commerce_tax_services_avatax_tax_service_calculate($order) {
  $sales_tax = array(
    'amount' => 0,
    'currency_code' => commerce_default_currency(),
    'data' => array(),
  );

  $product_version = variable_get('commerce_tax_services_avatax_product_version', COMMERCE_AVATAX_BASIC_VERSION);

  $use_mode = variable_get('commerce_avatax_use_mode');
  $avatax_microtime = variable_get('commerce_avatax_install_time');
  $doc_code_prefix = 'dc';
  $company_code = variable_get('commerce_avatax_' . $product_version . '_' . $use_mode . '_company', '');

  if (!$company_code) {
    drupal_set_message(t('AvaTax company code is not set.'), 'error');
    return FALSE;
  }

  // Sales Tax Shipping code.
  $shipcode = (variable_get('commerce_avatax_shipcode', ''));

  // Build order wrapper.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Exit if there are no line items in the order wrapper.
  if (count($order_wrapper->commerce_line_items) == 0) {
    drupal_set_message(t('There are no line items for this order.'), 'error');
    return FALSE;
  }

  // Get taxable address.
  $tax_address_profile = variable_get('commerce_avatax_tax_address', '');
  if ($tax_address_profile == 'Billing') {
    if (isset($order_wrapper->commerce_customer_billing->commerce_customer_address)) {
      $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
      $street1 = $billing_address['thoroughfare'];
      $street2 = $billing_address['premise'];
      $city = $billing_address['locality'];
      $state = $billing_address['administrative_area'];
      $country = $billing_address['country'];
      $zip = $billing_address['postal_code'];
    }
  }
  elseif ($tax_address_profile == 'Shipping') {
    if (isset($order_wrapper->commerce_customer_shipping->commerce_customer_address)) {
      $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
      $street1 = $shipping_address['thoroughfare'];
      $street2 = $shipping_address['premise'];
      $city = $shipping_address['locality'];
      $state = $shipping_address['administrative_area'];
      $country = $shipping_address['country'];
      $zip = $shipping_address['postal_code'];
    }
  }

  // Get primary business location.
  $primary_street1 = (variable_get('commerce_avatax_primary_street1', ''));
  $primary_street2 = (variable_get('commerce_avatax_primary_street2', ''));
  $primary_city = (variable_get('commerce_avatax_primary_city', ''));
  $primary_state = (variable_get('commerce_avatax_primary_state', ''));
  $primary_country = (variable_get('commerce_avatax_primary_country', ''));
  $primary_zip = (variable_get('commerce_avatax_primary_zip', ''));

  // Initialize sales tax exemption variable.
  $avatax_exemption_code = '';

  // Get User name or e-mail address.
  if ($order->uid == 0) {
    if ($order->order_id != 0 && $order->mail == '') {
      $user_id = 'administrator';
    }
    else {
      $user_email = $order->mail;
      $user_id = commerce_avatax_email_to_username($user_email);
    }
  }
  else {
    $user_data = user_load($order->uid);
    if (variable_get('commerce_avatax_exemptions_status', 0)) {
      if (isset($user_data->avatax_exemption_code[LANGUAGE_NONE][0]['value'])) {
        $avatax_exemption_code = $user_data->avatax_exemption_code[LANGUAGE_NONE][0]['value'];
      }
    }
    $user_id = $user_data->name;
  }

  $doc_date = REQUEST_TIME;

  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    // If this line item is an AvaTax line item...
    if ($line_item_wrapper->type->value() == 'avatax') {
      // Store its ID for later deletion and remove the reference from the
      // line item reference field.
      $doc_date = $line_item_wrapper->created->value();
    }
  }

  // Get currency code from the order.
  $avatax_total = $order_wrapper->commerce_order_total->value();
  $currency_code = $avatax_total['currency_code'];

  // Construct arguments for AvaTax functions.
  $ava_args = compact('product_version', 'company_code', 'doc_code_prefix', 'doc_date', 'user_id', 'avatax_exemption_code',
    'commit', 'currency_code', 'shipcode', 'use_mode', 'street1', 'street2', 'city', 'state', 'country', 'zip',
    'primary_street1', 'primary_street2', 'primary_city', 'primary_state', 'primary_country', 'primary_zip');

  // Get sales tax from AvaTax cloud service.
  $avatax_array = commerce_tax_services_avatax_get_tax($order, $order_wrapper, $ava_args);

  // Check that there was a return from the tax request.
  if (!$avatax_array) {
    drupal_set_message(t("AvaTax did not calculate sales tax."), 'error');
    return FALSE;
  }

  $sales_tax = array(
    'amount' => $avatax_array['TotalTax'] * 100,
    'currency_code' => $currency_code,
    'data' => array(),
  );

  return $sales_tax;
}

function commerce_tax_services_avatax_tax_service_validate_address($address) {
  $product_version = variable_get('commerce_tax_services_avatax_product_version', COMMERCE_AVATAX_BASIC_VERSION);
  $use_mode = variable_get('commerce_tax_services_avatax_use_mode', COMMERCE_AVATAX_DEVELOPMENT_MODE);
  $account_no = variable_get('commerce_tax_services_avatax_' . $product_version . '_' . $use_mode . '_account');
  $license_key = variable_get('commerce_tax_services_avatax_' . $product_version . '_' . $use_mode . '_license');

  if (!$product_version || !$use_mode || !$account_no || !$license_key) {
    return FALSE;
  }
  $parameters = array();
  if ($address['line1']) {
    $parameters['Line1'] = $address['line1'];
  }
  if ($address['line2']) {
    $parameters['Line2'] = $address['line2'];
  }
  if ($address['city']) {
    $parameters['City'] = $address['city'];
  }
  if ($address['state']) {
    $parameters['Region'] = $address['state'];
  }
  if ($address['postal_code']) {
    $parameters['PostalCode'] = $address['postal_code'];
  }

  $result = commerce_tax_services_get('address/validate', $parameters);
  if (!$result['body']) {
    watchdog('commerce_tax_services', 'Could not connect to TaxJar for address validation.');
    return NULL;
  }
  elseif ($result['body']['ResultCode'] != 'Success') {
    return array();
  }
  return $result['body']['Address'];
}

function commerce_tax_services_avatax_tax_service_config(&$config) {
  $use_mode = variable_get('commerce_tax_services_avatax_use_mode');
  $product_version = variable_get('commerce_tax_services_avatax_product_version');

  $subdomain = ($use_mode == COMMERCE_AVATAX_DEVELOPMENT_MODE) ? 'development' : 'rest';

  $config += array(
    'auth_username' => variable_get('commerce_tax_services_avatax_' . $product_version . '_' . $use_mode . '_account'),
    'auth_password' => variable_get('commerce_tax_services_avatax_' . $product_version . '_' . $use_mode . '_license'),
    'base_url' => "https://$subdomain.avalara.net/1.0",
  );
}

function commerce_tax_services_avatax_tax_service_cancel_transaction($order) {
  // Get Company code and Company Use Mode.
  $product_version = variable_get('commerce_tax_services_avatax_product_version');
  $use_mode = variable_get('commerce_tax_services_avatax_use_mode');
  $company_code = variable_get('commerce_tax_services_avatax_' . $product_version . '_' . $use_mode . '_company');
  $doc_code_prefix = 'dc';

  $body = array(
    'Client' => 'DrupalCommerce-CommerceGuys,4.3',
    'DocCode' => $doc_code_prefix . '-' . $order->order_id,
    'CompanyCode' => $company_code,
    'DocType' => 'SalesInvoice',
    'CancelCode' => 'DocVoided',
  );
  $response = commerce_tax_services_post('/tax/cancel', $body);
  if (is_array($response) && $response['body']) {
    $result = $response['body'];
    if (isset($result['CancelTaxResult']['ResultCode']) && (isset($result['CancelTaxResult']['Messages'])) && $result['CancelTaxResult']['ResultCode'] != 'Success') {
      foreach ($result['CancelTaxResult']['Messages'] as $msg) {
        drupal_set_message(t('AvaTax error: %msg - %source - %details - %summary', array(
          '%msg' => $msg['Severity'],
          '%source' => $msg['Source'],
          '%details' => $msg['Details'],
          '%summary' => $msg['Summary'],
        )), 'error');
      }
      watchdog('commerce_tax_services', 'Failed to void order @id !req !resp', array(
        '@id' => $order->order_id,
        '!req' => '<pre>' . var_export($body, TRUE) . '</pre>',
        '!resp' => '<pre>' . check_plain(var_export($body, TRUE)) . '</pre>',
      ), WATCHDOG_ERROR);
    }
  }

  if (!$response) {
    drupal_set_message(t("AvaTax did not get a response."), 'error');
    watchdog('commerce_tax_services', "Failed to void order @id - AvaTax did not respond.", array('@id' => $order->order_id), WATCHDOG_ERROR);
    return;
  }
}

/**
 * Gets the tax amount for the order based on the delivery address.
 *
 * @param object $order
 *   The current order object.
 * @param object $order_wrapper
 *   The current order entitywrapper object.
 * @param array $ava_args
 *   An array containing from & to delivery details.
 *
 * @return array
 *   An array containing the AvaTax request result
 *   or FALSE if the tax calculation failed.
 */
function commerce_tax_services_avatax_get_tax($order, $order_wrapper, $ava_args = array()) {
  $request_body = array(
    'Client' => 'DrupalCommerce-CommerceGuys,4.3',
    'CompanyCode' => $ava_args['company_code'],
    'DetailLevel' => 'Tax',
    'Commit' => $ava_args['commit'],
    'CurrencyCode' => $ava_args['currency_code'],
    'DocType' => 'SalesInvoice',
    'DocCode' => $ava_args['doc_code_prefix'] . '-' . $order->order_id . '',
    'DocDate' => date("Y-m-d", $ava_args['doc_date']),
    'CustomerCode' => $ava_args['user_id'],
    'CustomerUsageType' => $ava_args['avatax_exemption_code'],
    'Addresses' => array(
      // Origin.
      array(
        'AddressCode' => 0,
        'Line1' => $ava_args['primary_street1'],
        'Line2' => $ava_args['primary_street2'],
        'City' => $ava_args['primary_city'],
        'Region' => $ava_args['primary_state'],
        'Country' => $ava_args['primary_country'],
        'PostalCode' => $ava_args['primary_zip'],
      ),
      // Destination.
      array(
        'AddressCode' => 1,
        'Line1' => $ava_args['street1'],
        'Line2' => $ava_args['street2'],
        'City' => $ava_args['city'],
        'Region' => $ava_args['state'],
        'Country' => $ava_args['country'],
        'PostalCode' => $ava_args['zip'],
      ),
    ),
  );

  if (module_exists('commerce_avatax_exemptions')) {
    if (isset($order->data['commerce_avatax_exemptions_category'])
      && $order->data['commerce_avatax_exemptions_category']) {
      $request_body['CustomerUsageType'] = $order->data['commerce_avatax_exemptions_category'];
    }
  }

  $i = 1;
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    $line_item = $line_item_wrapper->value();
    $tax_code = '';
    if (in_array($line_item->type, commerce_product_line_item_types())) {
      if ($ava_args['product_version'] == COMMERCE_AVATAX_PRO_VERSION) {
        $tax_field_name = 'avatax_code';
        $product_field = field_get_items('commerce_line_item', $line_item, 'commerce_product');
        $product_id = $product_field[0]['product_id'];
        $prod_data = commerce_product_load($product_id);
        $avatax_code_field_value = field_get_items('commerce_product', $prod_data, $tax_field_name);
        if ($avatax_code_field_value) {
          $tid = $avatax_code_field_value[0]['tid'];
          $taxonomy_term = taxonomy_term_load($tid);
          $tax_code = $taxonomy_term->name;
        }
      }
      $avatax_line_item_label = substr($line_item->line_item_label, 0, 49);
      $lines[] = array(
        'LineNo' => $i,
        'ItemCode' => $avatax_line_item_label,
        'Description' => $line_item_wrapper->commerce_product->title->value(),
        'TaxCode' => $tax_code,
        'Qty' => $line_item->quantity,
        'Amount' => ($line_item_wrapper->commerce_unit_price->amount->value() / 100) * $line_item->quantity,
        'Discounted' => 'true',
        'Ref1' => '',
        'Ref2' => '',
        'CustomerUsageType' => '',
        'OriginCode' => 0,
        'DestinationCode' => 1,
      );
      $i++;
    }
    elseif (in_array($line_item->type, array('shipping'))) {
      $lines[] = array(
        'LineNo' => $i,
        'ItemCode' => 'Shipping',
        'Description' => 'Shipping',
        'TaxCode' => $ava_args['shipcode'],
        'Qty' => $line_item->quantity,
        'Amount' => ($line_item_wrapper->commerce_unit_price->amount->value() / 100) * $line_item->quantity,
        'Discounted' => 'false',
        'Ref1' => '',
        'Ref2' => '',
        'CustomerUsageType' => '',
        'OriginCode' => 0,
        'DestinationCode' => 1,
      );
      $i++;
    }
    elseif (in_array($line_item->type, array('commerce_coupon'))) {
      $lines[] = array(
        'LineNo' => $i,
        'ItemCode' => 'Coupon',
        'Description' => 'Coupon Amt',
        'TaxCode' => '0D010000',
        'Qty' => $line_item->quantity,
        'Amount' => ($line_item_wrapper->commerce_unit_price->amount->value() / 100) * $line_item->quantity,
        'Discounted' => 'false',
        'Ref1' => '',
        'Ref2' => '',
        'CustomerUsageType' => '',
        'OriginCode' => 0,
        'DestinationCode' => 1,
      );
      $i++;
    }
    elseif (in_array($line_item->type, array('commerce_discount'))) {
      $request_body['Discount'] = (($line_item_wrapper->commerce_unit_price->amount->value() / 100) * $line_item->quantity) * -1;
    }
  }

  $request_body['Lines'] = $lines;

  $response = commerce_tax_services_post('/tax/get', $request_body);
  if (is_array($response) && $response['body']) {
    $ava_result = $response['body'];
    if ($ava_result['ResultCode'] == 'Success') {
      return $ava_result;
    }
    else {
      foreach ($ava_result['Messages'] as $msg) {
        drupal_set_message(t('AvaTax error: %msg - %source - %summary', array(
          '%msg' => $msg['Severity'],
          '%source' => $msg['Source'],
          '%summary' => $msg['Summary'],
        )), 'error');
      }
      return FALSE;
    }
  }
  else {
    drupal_set_message(t("AvaTax did not get a response."), 'error');
    return FALSE;
  }
}

function commerce_tax_services_avatax_tax_service_admin_options_alter(&$form, &$form_state) {
  $product_version = variable_get('commerce_tax_services_avatax_product_version', COMMERCE_AVATAX_BASIC_VERSION);
  if (isset($form_state['values']['commerce_tax_services_avatax_product_version']) && $form_state['values']['commerce_tax_services_avatax_product_version']) {
    $product_version = $form_state['values']['commerce_tax_services_avatax_product_version'];
  }

  $avatax_use_modes = array(
    COMMERCE_AVATAX_DEVELOPMENT_MODE => t('Development'),
    COMMERCE_AVATAX_PRODUCTION_MODE => t('Production'),
  );

  $use_mode = variable_get('commerce_tax_services_avatax_use_mode', COMMERCE_AVATAX_DEVELOPMENT_MODE);
  if (isset($form_state['values']['commerce_tax_services_avatax_use_mode']) && $form_state['values']['commerce_tax_services_avatax_use_mode']) {
    $use_mode = $form_state['values']['commerce_tax_services_avatax_use_mode'];
  }

  // Set AvaTax license details.
  $form['commerce_tax_services_avatax_product_version'] = array(
    '#title' => t('Select AvaTax Version'),
    '#type' => 'select',
    '#options' => array(
      COMMERCE_AVATAX_BASIC_VERSION => t('AvaTax Basic'),
      COMMERCE_AVATAX_PRO_VERSION => t('AvaTax Pro'),
    ),
    '#default_value' => variable_get('commerce_tax_services_avatax_product_version', COMMERCE_AVATAX_BASIC_VERSION),
    '#ajax' => array(
      'callback' => 'commerce_tax_services_ui_update_form_options',
      'wrapper' => 'commerce_tax_services_options',
    ),
  );

  // Set Shipping Tax code to be used by AvaTax.
  $form['options']['shipping']['commerce_tax_services_shipcode'] = array(
    '#title' => t('Shipping Tax Code'),
    '#description' => t('The Sales Tax code to be used for Shipping'),
    '#type' => 'textfield',
    '#default_value' => variable_get('commerce_tax_services_shipcode', 'FR020100'),
  );

  $form['options']['address_validate']['config']['commerce_tax_services_address_postal_code'] = array(
    '#type' => 'checkbox',
    '#title' => t('Match on postal code'),
    '#description' => t('Postal codes are 9 digits, but most people enter the first 5 digits, do you want AvaTax to match all 9 digits?'),
    '#default_value' => variable_get('commerce_tax_services_address_postal_code', TRUE),
  );

  $form['options']['address_validate']['config']['commerce_tax_services_autocomplete_postal_code'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto complete 5 digit postal code to 9 digits'),
    '#description' => t('Automatically insert the 9 digit postal code provided by AvaTax'),
    '#default_value' => variable_get('commerce_tax_services_autocomplete_postal_code', TRUE),
  );

  $company_default = variable_get('commerce_tax_services_' . $product_version . '_' . $use_mode . '_company');
  $account_default = variable_get('commerce_tax_services_' . $product_version . '_' . $use_mode . '_account');
  if (isset($form_state['clicked_button']['#value']) && isset($form_state['account_no']) && !empty($form_state['account_no'])) {
    $account_default = $form_state['account_no'];
  }
  $license_default = variable_get('commerce_tax_services_' . $product_version . '_' . $use_mode . '_license');
  if (isset($form_state['clicked_button']['#value']) && isset($form_state['license_key']) && !empty($form_state['license_key'])) {
    $license_default = $form_state['license_key'];
  }

  if ($product_version == COMMERCE_AVATAX_BASIC_VERSION || $product_version == COMMERCE_AVATAX_PRO_VERSION) {
    $form['options']['credentials'] = array(
      '#type' => 'fieldset',
      '#title' => t('AvaTax Credentials'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => FALSE,
    );

    $form['options']['credentials']['commerce_tax_services_avatax_use_mode'] = array(
      '#title' => t('AvaTax Mode'),
      '#description' => t('Only select Production after completing the GO LIVE process with Avalara'),
      '#type' => 'select',
      '#options' => $avatax_use_modes,
      '#default_value' => $use_mode,
      '#ajax' => array(
        'callback' => 'commerce_tax_services_avatax_ajax_mode_credentials',
        'wrapper' => 'commerce_tax_services_credentials_text_fields',
      ),
    );

    $form['options']['credentials']['fields'] = array(
      '#type' => 'container',
      '#prefix' => '<div id="commerce_tax_services_credentials_text_fields">',
      '#suffix' => '</div>',
    );

    $form['options']['credentials']['fields']['commerce_tax_services_' . $product_version . '_' . $use_mode . '_company'] = array(
      '#title' => t('Company Code'),
      '#description' => t('Enter the Company Code for your AvaTax version'),
      '#type' => 'textfield',
      '#default_value' => $company_default,
      '#required' => TRUE,
    );
    $form['options']['credentials']['fields']['commerce_tax_services_' . $product_version . '_' . $use_mode . '_account'] = array(
      '#title' => t('@mode Account number', array('@mode' => $use_mode)),
      '#type' => 'textfield',
      '#default_value' => $account_default,
      '#required' => TRUE,
    );
    $form['options']['credentials']['fields']['commerce_tax_services_' . $product_version . '_' . $use_mode . '_license'] = array(
      '#title' => t('@mode License key', array('@mode' => $use_mode)),
      '#type' => 'textfield',
      '#default_value' => $license_default,
      '#required' => TRUE,
    );
  }

  $form['options']['credentials']['fields']['validate_btn'] = array(
    '#name' => 'commerce_tax_services_ui_credentials_validator_button',
    '#type' => 'button',
    '#value' => t('Validate credentials'),
    '#ajax' => array(
      'callback' => 'commerce_tax_services_avatax_credentials_validator_callback',
      'wrapper' => 'credentials_fields_validator_wrapper',
    ),
  );

  $form['options']['credentials']['fields']['validator_wrapper'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="credentials_fields_validator_wrapper">',
    '#suffix' => '</div>',
  );

  if (isset($form_state['clicked_button']['#name']) == 'commerce_tax_services_ui_credentials_validator_button') {
    if ($form_state['values']['commerce_tax_services_primary_street1'] && $form_state['values']['commerce_tax_services_primary_city'] && $form_state['values']['commerce_tax_services_primary_state'] && $form_state['values']['commerce_tax_services_primary_zip']) {
      $validated = commerce_tax_services_avatax_admin_form_validate_credentials($form, $form_state);
      $form['options']['credentials']['fields']['validator_wrapper']['_validation_message'] = array(
        '#type' => 'item',
        '#markup' => '<p>' . $validated[1] . '</p>',
      );
    }
    else {
      $form['options']['credentials']['validator_wrapper']['_validation_message'] = array(
        '#type' => 'item',
        '#markup' => '<p>' . t('Please complete the required shipping address fields.') . '</p>',
      );
    }
  }

  if ($product_version == COMMERCE_AVATAX_BASIC_VERSION || $product_version == COMMERCE_AVATAX_PRO_VERSION) {
    $form['options']['erp'] = array(
      '#type' => 'fieldset',
      '#title' => t('Sales Order Processing'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['options']['erp']['commerce_tax_services_erp_status'] = array(
      '#title' => t('Automatic updates to AvaTax doc status'),
      '#description' => t('Select "Yes" to enable automatic updates to AvaTax doc status'),
      '#type' => 'radios',
      '#options' => array('0' => t('No'), '1' => t('Yes')),
      '#default_value' => variable_get('commerce_tax_services_erp_status', '0'),
      '#ajax' => array(
        'callback' => 'commerce_tax_services_ui_ajax_rules_options',
        'wrapper' => 'commerce_tax_services_erp_rules',
      ),
    );
    $form['options']['erp']['rules'] = array(
      '#type' => 'container',
      '#tree' => FALSE,
      '#prefix' => '<div id="commerce_tax_services_erp_rules">',
      '#suffix' => '</div>',
    );

    $rules = rules_config_load_multiple(array(
      'commerce_tax_services_sop_commit',
      'commerce_tax_services_sop_cancel',
      'commerce_tax_services_sop_cancel_on_delete',
    ));
    if (!empty($rules)) {
      $erp_form_value = 0;
      if (isset($form_state['values']['commerce_tax_services_erp_status'])) {
        $erp_form_value = $form_state['values']['commerce_tax_services_erp_status'];
      }
      $erp_config_value = variable_get('commerce_tax_services_erp_status', 0);
      if ($erp_form_value || $erp_config_value) {
        $form['options']['erp']['rules']['overwrite_rules'] = array(
          '#type' => 'checkbox',
          '#title' => t('Overwrite existing Sales Order Processing Rules'),
        );
      }
      if ($erp_config_value && !$erp_form_value) {
        $form['options']['erp']['rules']['delete_rules'] = array(
          '#type' => 'checkbox',
          '#title' => t('Delete Sales Order Processing Rules.'),
        );
      }
    }
  }

  if ($product_version == COMMERCE_AVATAX_BASIC_VERSION || $product_version == COMMERCE_AVATAX_PRO_VERSION) {
    $form['options']['exemptions'] = array(
      '#type' => 'fieldset',
      '#title' => t('AvaTax Exemption settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => FALSE,
    );
    $form['options']['exemptions']['commerce_tax_services_exemptions_status'] = array(
      '#title' => t('Administer Sales Tax Exemptions'),
      '#description' => t('Select "Yes" to enter sales tax exemption codes for registered users'),
      '#type' => 'radios',
      '#options' => array('0' => t('No'), '1' => t('Yes')),
      '#default_value' => variable_get('commerce_tax_services_exemptions_status', 0),
    );
    if (variable_get('commerce_tax_services_exemptions_status', 0)) {
      $form['options']['exemptions']['commerce_tax_services_exemptions_delete_field'] = array(
        '#type' => 'checkbox',
        '#title' => t('Delete exemption code field from user profile.'),
        '#description' => t('WARNING: This action can not be undone. All user data will be lost.'),
        '#states' => array(
          'visible' => array(
            ':input[name="commerce_tax_services_exemptions_status"]' => array(
              'value' => 0,
            ),
          ),
        ),
      );
    }
  }

  if ($product_version == COMMERCE_AVATAX_PRO_VERSION) {
    $form['options']['pro'] = array(
      '#type' => 'fieldset',
      '#title' => t('AvaTax Pro settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => FALSE,
    );
    $product_types = commerce_product_types();
    foreach ($product_types as $product_type => $product_type_info) {
      $product_types[$product_type] = $product_type_info['name'];
    }
    $form['options']['pro']['commerce_tax_services_product_types'] = array(
      '#title' => t('Product types'),
      '#type' => 'select',
      '#multiple' => TRUE,
      '#options' => $product_types,
      '#default_value' => variable_get('commerce_tax_services_product_types', array()),
      '#description' => t('Which product types should have their taxes calculated by AvaTax? Leave empty to enable for all product types.'),
    );
  }

  $form['#submit'][] = 'commerce_tax_services_avatax_add_pro_tax_code_fields';
  $form['#submit'][] = 'commerce_tax_services_avatax_add_erp_rules';
  $form['#submit'][] = 'commerce_tax_services_avatax_exemption_field';
}

/**
 * Add/Delete ERP related rules.
 */
function commerce_tax_services_avatax_add_erp_rules($form, &$form_state) {
  if (isset($form_state['values']['commerce_tax_services_erp_status']) && $form_state['values']['commerce_tax_services_erp_status']) {
    $rules = rules_config_load_multiple(array(
      'commerce_tax_services_avatax_sop_commit',
      'commerce_tax_services_avatax_sop_cancel',
      'commerce_tax_services_avatax_sop_cancel_on_delete',
    ));

    // Create rules if they don't already exist or the overwrite option has been selected.
    if ((count($rules) != 3) || (isset($form_state['values']['overwrite_rules']) && $form_state['values']['overwrite_rules'])) {
      // Delete rules if the delete option has been selected.
      rules_config_delete(array_keys($rules));

      $commit_rule = new RulesReactionRule();
      $commit_rule->label = 'COMMIT order sales tax';
      $commit_rule->active = TRUE;
      $commit_rule->event('commerce_order_update');
      $commit_rule->condition(rules_condition('data_is', array(
        'data:select' => 'commerce-order:status',
        'op' => '==',
        'value:select' => 'commerce-order-unchanged:status',
      ))->negate());
      $commit_rule->condition(rules_condition('data_is', array(
        'data:select' => 'commerce-order:status',
        'op' => '==',
        'value' => 'completed',
      )));
      $commit_rule->action(rules_action('commerce_tax_services_commit_transaction', array(
        'order:select' => 'commerce-order',
      )));
      $commit_rule->save('commerce_tax_services_avatax_sop_commit');

      $cancel_rule = new RulesReactionRule();
      $cancel_rule->label = 'CANCEL order sales tax';
      $cancel_rule->active = TRUE;
      $cancel_rule->event('commerce_order_update');
      $cancel_rule->condition(rules_condition('data_is', array(
        'data:select' => 'commerce-order:status',
        'op' => '==',
        'value:select' => 'commerce-order-unchanged:status',
      ))->negate());
      $cancel_rule->condition(rules_condition('data_is', array(
        'data:select' => 'commerce-order:status',
        'op' => '==',
        'value' => 'canceled',
      )));
      $cancel_rule->action(rules_action('commerce_tax_services_cancel_transaction', array(
        'order:select' => 'commerce-order',
      )));
      $cancel_rule->save('commerce_tax_services_avatax_sop_cancel');

      $cancel_delete_rule = new RulesReactionRule();
      $cancel_delete_rule->label = 'CANCEL order sales tax on order delete';
      $cancel_delete_rule->active = TRUE;
      $cancel_delete_rule->event('commerce_order_delete');
      $cancel_delete_rule->action(rules_action('commerce_tax_services_cancel_transaction', array(
        'order:select' => 'commerce-order',
      )));
      $cancel_delete_rule->save('commerce_tax_services_avatax_sop_cancel_on_delete');
    }
  } else {
    // Delete rules if the delete option has been selected.
    if (isset($form_state['values']['delete_rules']) && $form_state['values']['delete_rules']) {
      $rules = rules_config_load_multiple(array(
        'commerce_tax_services_avatax_sop_commit',
        'commerce_tax_services_avatax_sop_cancel',
        'commerce_tax_services_avatax_sop_cancel_on_delete',
      ));

      rules_config_delete(array_keys($rules));
    }
  }
}

/**
 * Adds AvaTax code term reference field to the selected content types.
 */
function commerce_tax_services_avatax_add_pro_tax_code_fields($form, &$form_state) {
  // Get out of here if a button other than 'Submit' was clicked.
  if ($form_state['clicked_button']['#value'] != $form['actions']['submit']['#value']) {
    return;
  }

  $product_version = $form_state['values']['commerce_tax_services_avatax_product_version'];
  if ($product_version == COMMERCE_AVATAX_PRO_VERSION) {
    // Create the taxonomy vocabulary and default avatax code terms.
    $vocab = taxonomy_vocabulary_machine_name_load('avatax_tax_codes');
    if (!$vocab) {
      $vocab = (object) array(
        'name' => t('AvaTax Tax codes'),
        'machine_name' => 'avatax_tax_codes',
      );
      taxonomy_vocabulary_save($vocab);
      taxonomy_term_save((object) array(
        'name' => 'P0000000',
        'vid' => $vocab->vid,
      ));
      taxonomy_term_save((object) array(
        'name' => 'NT',
        'vid' => $vocab->vid,
      ));
    }

    // Get the old configuration.
    $old_product_types = variable_get('commerce_tax_services_product_types', array());
    if (empty($old_product_types)) {
      $old_product_types = array_keys(commerce_product_types());
    }

    $field_name = 'avatax_code';
    $new_product_types = $form_state['values']['commerce_tax_services_product_types'];
    if (empty($new_product_types)) {
      $new_product_types = array_keys(commerce_product_types());
    }

    // If the old field name and the new field name are identical,
    // just remove the field from product types that are no longer selected.
    if ($old_product_types != $new_product_types) {
      // Remove the field from the product types that have been unselected.
      foreach ($old_product_types as $old_type) {
        if (!in_array($old_type, $new_product_types)) {
          $instance = field_info_instance('commerce_product', $field_name, $old_type);
          if ($instance) {
            field_delete_instance($instance);
          }
        }
      }
    }

    // Create the field type if it doesn't exist.
    $field = field_info_field($field_name);
    if (!$field) {
      $field = field_create_field(array(
        'cardinality' => 1,
        'field_name' => check_plain($field_name),
        'settings' => array(
          'allowed_values' => array(
            0 => array(
              'vocabulary' => 'avatax_tax_codes',
            ),
          ),
        ),
        'type' => 'taxonomy_term_reference',
      ));
    }

    // Create the field instance for the selected product types.
    foreach ($new_product_types as $type) {
      $instance = field_info_instance('commerce_product', $field_name, $type);
      if (!$instance) {
        field_create_instance(array(
          'bundle' => $type,
          // @todo: set default_value
          'default_value' => NULL,
          'display' => array(
            'default' => array(
              'type' => 'hidden',
            ),
            'teaser' => array(
              'type' => 'hidden',
            ),
          ),
          'entity_type' => 'commerce_product',
          'field_name' => check_plain($field_name),
          'label' => 'AvaTax code',
          'required' => TRUE,
          'widget' => array(
            'module' => 'taxonomy',
            'settings' => array(
              'autocomplete_path' => 'taxonomy/autocomplete',
              'size' => 60,
            ),
            'type' => 'taxonomy_autocomplete',
            'weight' => -4,
          ),
        ));
      }
    }
  }
}

/**
 * Submit callback for adding/removing exemption code field to the user profile.
 */
function commerce_tax_services_avatax_exemption_field($form, &$form_state) {
  $exemption_status = isset($form_state['values']['commerce_tax_services_exemptions_status']) ? $form_state['values']['commerce_tax_services_exemptions_status'] : FALSE;
  if ($exemption_status) {
    // Exemption status is YES.
    // Create the field and instance if they do not exist.
    $field = field_info_field('avatax_exemption_code');
    if (!$field) {
      field_create_field(array(
        'cardinality' => 1,
        'field_name' => 'avatax_exemption_code',
        'settings' => array(
          'allowed_values' => array(
            'E' => 'Charitable or benevolent org',
            'H' => 'Commercial agricultural production',
            'J' => 'Direct pay permit',
            'K' => 'Direct mail',
            'A' => 'Federal government',
            'D' => 'Foreign diplomat',
            'I' => 'Industrial production / manufacturer',
            'N' => 'Local government',
            'B' => 'State government',
            'C' => 'Tribe / Status Indian / Indian Band',
            'F' => 'Religious or educational org',
            'G' => 'Resale',
            'L' => 'Other',
          ),
        ),
        'type' => 'list_text',
      ));
    }
    $instance = field_info_instance('user', 'avatax_exemption_code', 'user');
    if (!$instance) {
      field_create_instance(array(
        'bundle' => 'user',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'list',
            'settings' => array(),
            'type' => 'list_default',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'user',
        'field_name' => 'avatax_exemption_code',
        'label' => 'AvaTax Exemption Code',
        'required' => 0,
        'settings' => array(
          'user_register_form' => 0,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'options',
          'settings' => array(),
          'type' => 'options_select',
          'weight' => 7,
        ),
      ));
    }
  }
  else {
    // Exemption status is NO.
    // If the previous status is YES, and user has asked to delete the fields.
    $previous_state = variable_get('commerce_tax_services_exemptions_status');
    if ($previous_state) {
      if ($form_state['values']['commerce_tax_services_exemptions_delete_field']) {
        $instance = field_info_instance('user', 'avatax_exemption_code', 'user');
        if ($instance) {
          field_delete_instance($instance);
        }

        $field = field_info_field('avatax_exemption_code');
        if ($field) {
          field_delete_field('avatax_exemption_code');
        }
      }
    }
  }
}

/**
 * Validate AvaTax account and license by testing the primary address.
 */
function commerce_tax_services_avatax_admin_form_validate_credentials($form, $form_state) {
  // Only validate if the user has clicked on the 'Validate credentials' button.
  if ($form_state['clicked_button']['#value'] != $form['options']['credentials']['fields']['validate_btn']['#value']) {
    return;
  }

  $parameters = array(
    'line1' => $form_state['values']['commerce_tax_services_primary_street1'],
    'line2' => $form_state['values']['commerce_tax_services_primary_street2'],
    'city' => $form_state['values']['commerce_tax_services_primary_city'],
    'region' => $form_state['values']['commerce_tax_services_primary_state'],
    'country' => $form_state['values']['commerce_tax_services_primary_country'],
    'postalcode' => $form_state['values']['commerce_tax_services_primary_zip'],
  );

  $product_version = $form_state['values']['commerce_tax_services_avatax_product_version'];
  $use_mode = $form_state['values']['commerce_tax_services_avatax_use_mode'];
  $account = $form_state['values']['commerce_tax_services_avatax_' . $product_version . '_' . $use_mode . '_account'];
  $license = $form_state['values']['commerce_tax_services_avatax_' . $product_version . '_' . $use_mode . '_license'];

  $base_url = 'https://development.avalara.net/1.0';
  if ($use_mode == COMMERCE_AVATAX_PRODUCTION_MODE) {
    $base_url = 'https://rest.avalara.net/1.0';
  }

  $querystring = http_build_query($parameters);
  $querystring = str_replace("amp;", "", $querystring);

  $curl_opts = array(
    // Return result instead of echoing.
    CURLOPT_RETURNTRANSFER => TRUE,
    // Follow redirects, Location: headers.
    CURLOPT_FOLLOWLOCATION => FALSE,
    // But do not redirect more than 10 times.
    CURLOPT_MAXREDIRS => 10,
    // Abort if network connection takes more than 5 seconds.
    CURLOPT_CONNECTTIMEOUT => 10,
    CURLOPT_SSL_VERIFYPEER => TRUE,
  );

  $curl_opts[CURLOPT_HTTPHEADER] = array(
    'Content-Type: text/json',
    'Authorization: Basic ' . base64_encode("$account:$license"),
    'Date: ' . date(DATE_RFC1123, REQUEST_TIME),
  );

  $url = rtrim($base_url, '/') . '/address/validate';

  if ($querystring) {
    $url .= '?' . $querystring;
  }

  $curl = curl_init($url);

  foreach ($curl_opts as $opt => $val) {
    curl_setopt($curl, $opt, $val);
  }

  $body = curl_exec($curl);

  curl_close($curl);

  if ($body === FALSE) {
    return array(FALSE, t('AvaTax request failed. This may be an out of date SSL certificates on your server.'));
  }

  $body_parsed = json_decode($body, TRUE);

  if ($body_parsed['ResultCode'] == 'Success') {
    return array(TRUE, t('AvaTax response confirmed using the account and license key above.'));
  }

  $message = ($body_parsed['Messages'][0]['Summary']) ? $body_parsed['Messages'][0]['Summary'] : 'AvaTax was not able to return an error message';

  return array(FALSE, t('Validate credentials failed: @body', array('@body' => t($message))));
}

/**
 * Ajax callback for returning credentials validation results.
 */
function commerce_tax_services_avatax_credentials_validator_callback($form, &$form_state) {
  return $form['options']['credentials']['fields']['validator_wrapper'];
}

/**
 * Ajax: Returns container field for credential textfields.
 */
function commerce_tax_services_avatax_ajax_mode_credentials($form, &$form_state) {
  return $form['options']['credentials']['fields'];
}

/**
 * Ajax: Return container field for Sales Order Processing rules configuration.
 */
function commerce_tax_services_avatax_ajax_rules_options($form, &$form_state) {
  return $form['options']['erp']['rules'];
}
